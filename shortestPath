import java.util.*;

public class ShortestPaths {

    static void shortestPaths(ArrayList<Integer>[] adj, ArrayList<Integer>[] cost, int s, long[] distance, int[] reachable, int[] shortest) {
      //write your code here
        distance[s] = 0;

        for(int k = 0; k<adj.length;k++){
            for (int i = 0; i < adj.length; ++i) {
                for (int j = 0; j < adj[i].size(); ++j) {
                    int neighbor = adj[i].get(j);
                    int weight =  cost[i].get(j);
                    if (relax(distance,neighbor,weight,i)){
                        if(k== adj.length-1) shortest[neighbor] =0;
                    }
                }
            }
        }
        reachable(adj,cost,s,reachable);
        Set<Integer> cycle = new HashSet<>();
        for (int i = 0; i < adj.length; ++i) {
            for (int j = 0; j < adj[i].size(); ++j) {
                int neighbor = adj[i].get(j);
                int weight =  cost[i].get(j);
                if (relax(distance,neighbor,weight,i)){
                    cycle.add(neighbor);
                }
            }
        }

        for (int i = 0; i < adj.length; ++i)
            distance[i] = shortest[i];
    }
    private static boolean relax(long[] distance,int neighbor,int weight,int from){
        if(distance[neighbor] == Long.MAX_VALUE) return false;
        if(distance[neighbor] > distance[from] + weight){
            distance[neighbor] = distance[from] + weight;
            return true;
        }
        return false;
    }
    private static void reachableToNegCycle(ArrayList<Integer>[] adj, ArrayList<Integer>[] cost,int[] shortest,Set<Integer> cycle){
        Stack<Integer> yup = new Stack<>();
        Set<Integer> visited = new HashSet<>();
        
        while(!cycle.isEmpty()){
            for(int i=0;i < cycle.toArray().length;i++){
                Integer cur = (Integer) cycle.toArray()[i];
                yup.push(cur);
                while(!yup.isEmpty()){
                    int next = 
                }
            }
        }
    }
    private static void reachable(ArrayList<Integer>[] adj, ArrayList<Integer>[] cost,int ok,int[] reachable){
        Stack<Integer> bad = new Stack<>();
        bad.push(ok);
        while(!bad.isEmpty()){
            int cur = bad.pop();
            if(reachable[cur] == 1) continue;
            reachable[cur] = 1;
            for(int nay:adj[cur]){
                bad.push(nay);
            }
        }
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        ArrayList<Integer>[] cost = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<Integer>();
            cost[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y, w;
            x = scanner.nextInt();
            y = scanner.nextInt();
            w = scanner.nextInt();
            adj[x - 1].add(y - 1);
            cost[x - 1].add(w);
        }
        int s = scanner.nextInt() - 1;
        long distance[] = new long[n];
        int reachable[] = new int[n];
        int shortest[] = new int[n];
        for (int i = 0; i < n; i++) {
            distance[i] = Long.MAX_VALUE;
            reachable[i] = 0;
            shortest[i] = 1;
        }
        shortestPaths(adj, cost, s, distance, reachable, shortest);
        for (int i = 0; i < n; i++) {
            if (reachable[i] == 0) {
                System.out.println('*');
            } else if (shortest[i] == 0) {
                System.out.println('-');
            } else {
                System.out.println(distance[i]);
            }
        }
    }

}

