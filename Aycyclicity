import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.Stack;

public class Acyclicity {
    private static int acyclic(ArrayList<Integer>[] adj) {
        //write your code here
        /*
         Task. Check whether a given directed graph with 𝑛 vertices and 𝑚 edges contains a cycle.
         Input Format. A graph is given in the standard format.
         Output Format. Output 1 if the graph contains a cycle and 0 otherwise.

         */
        Set<Integer> visited = new HashSet<>();
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < adj.length; i++) {
            if (!visited.contains(i)) {
                if(DFS(adj, i, visited, stack)){
                    return 1;
                }
            }
        }
    
        return 0;
    }
    static boolean DFS(ArrayList<Integer>[] adj,int v,Set<Integer> visited,Stack<Integer> stack){
        visited.add(v);
        for(Integer yup : adj[v]){
            if(!visited.contains(yup)){
                return DFS(adj,yup,visited,stack);
            }
            else{
                return true;
            }
        }
        stack.add(v);
        return false;
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y;
            x = scanner.nextInt();
            y = scanner.nextInt();
            adj[x - 1].add(y - 1);
        }
        System.out.println(acyclic(adj));
    }
}

