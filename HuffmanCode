import java.io.PrintStream;
import java.util.*;

public class HuffmanCode {
    private int[] freq;
    private Map<Integer,Integer> binaryCharMap;
    private Queue<Node> pq;
    public HuffmanCode(int[] count) {
        freq = count;
        pq = new PriorityQueue();
        for (int i=0;i<freq.length;i++){
            if(freq[i] == 0) continue;
            Node tempNode = new Node(freq[i]);
            tempNode.setCharacter(i);
            pq.add(tempNode);
        }
        do {
            Node min1 = pq.poll();
            Node min2 = pq.poll();
            if(min2 != null){
                Node holder = new Node(min1.getFrequencyOfCharacter()+min2.getFrequencyOfCharacter());
                if(min2.compareTo(min1) <= 0){
                    holder.setLeft(min2);
                    holder.setRight(min1);
                }else {
                    holder.setRight(min2);
                    holder.setLeft(min1);
                }
                pq.add(holder);
            }
        } while(pq.size()!=1);

    }
    public HuffmanCode(Scanner codeInput) {
        binaryCharMap = new HashMap<>();
        while(codeInput.hasNextInt()){
            int character = codeInput.nextInt();
            int binary = codeInput.nextInt(); 
            binaryCharMap.put(binary, character);
        }
    }

    public void save(PrintStream output) {
        //printNodesRightToLeft(pq.peek());
        saveFromLeftToRight(pq.peek(), "", output);
    }
    private void saveFromLeftToRight(Node n, String curBinary, PrintStream output) {
        if (n.getLeft() == null && n.getRight() == null) {
            output.println(n.getCharacter() + "\n" + curBinary);
        }
    
        if (n.getLeft() != null) {
            saveFromLeftToRight(n.getLeft(), curBinary + "0", output);
        }
    
        if (n.getRight() != null) {
            saveFromLeftToRight(n.getRight(), curBinary + "1", output);
        }
    }
    
    public void translate(BitInputStream input, PrintStream output) {
        String translated = "";
        String curBinary = "";
        while(input.hasNextBit()){
            int bit = input.nextBit();
            curBinary+=bit;
            if (checkIfLetter(curBinary) != -1) {
                translated+=((char)checkIfLetter(curBinary));
                curBinary="";
            }
        }
        output.print(translated.toString());
    }
    private int checkIfLetter(String curBinary){
        if (binaryCharMap.containsKey(Integer.parseInt(curBinary))){
            return binaryCharMap.get(Integer.parseInt(curBinary));
        }
        return -1;
    }
    
    private class Node implements Comparable<Node>{
        private Node left,right;
        private int character;
        private int frequencyOfCharacter;
        public Node(int freq){
            this.frequencyOfCharacter = freq;
            character = -1;
        }

        public Node getLeft() {
            return left;
        }

        public Node getRight() {
            return right;
        }

        public int getCharacter() {
            return character;
        }

        public int getFrequencyOfCharacter() {
            return frequencyOfCharacter;
        }

        public void setLeft(Node left) {
            this.left = left;
        }

        public void setRight(Node right) {
            this.right = right;
        }

        public void setCharacter(int character) {
            this.character = character;
        }

        @Override
        public int compareTo(Node o) {
            return Integer.compare(frequencyOfCharacter,o.getFrequencyOfCharacter());
        }
    }
}
