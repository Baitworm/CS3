import java.awt.*;
import java.util.*;

public class ConnectingPoints {
    private static double minimumDistance(int[] x, int[] y) {
        double result = 0.;
        Point[] points = new Point[x.length];
        Map<Point,ArrayList<Edge>> graph = new HashMap<>();
        for (int i=0;i<x.length;i++){
            Point p = new Point(x[i],y[i]);
            points[i] = p;
            graph.put(p,new ArrayList<>());
        }
        for(int i = 0; i< points.length; i++){
            for(int j = i+1; j< points.length; j++){
                graph.get(points[i]).add(new Edge(points[i],points[j]));
                graph.get(points[j]).add(new Edge(points[i],points[j]));
            }
        }
        Set<Edge> visited = new HashSet<>();
        Queue<Edge> pq  = new PriorityQueue<>();
        pq.addAll(graph.get(points[0]));
        Edge curShortest;
        
        do{
            curShortest = pq.poll();
        } while (!pq.isEmpty() && visited.contains(curShortest));
        visited.add(curShortest);
        result+= curShortest.getDistance();
        
        //write your code here
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        int[] y = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }
        System.out.println(minimumDistance(x, y));
    }
}
class Edge implements Comparable<Edge> {
    private Point p1,p2;
    private double weight;
    public Edge(Point p1, Point p2){
        this.p1 = p1;
        this.p2 = p2;
        weight = getDistance();
    }
    public double getDistance(){
        return p1.distance(p2);
    }

    public Point getP2() {
        return p2;
    }

    public double getWeight() {
        return weight;
    }

    @Override
    public int compareTo(Edge o) {
        return weight < o.getWeight() ? -1 : weight == o.getWeight() ? 0 : 1;
    }
}

