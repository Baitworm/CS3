import java.util.*;
import java.awt.*;
public class ConnectingPoints {
    private static double minimumDistance(int[] x, int[] y) {
        double result = 0.;
        Point[] points = new Point[x.length];
        Map<Point, ArrayList<Point>> graph = new HashMap<>();
        for (int i = 0; i < x.length; i++) {
            Point p = new Point(x[i], y[i]);
            points[i] = p;
            graph.put(p, new ArrayList<Point>());
        }
        Set<Point> visited = new HashSet<>();
        for (int i=0;i<points.length;i++){
            for(int j=i+1;j<points.length;j++){
                if (!visited.contains(points[j])){
                    graph.get(points[i]).add(points[j]);
                }
            }
            visited.add(points[i]);
        }
        visited.clear();
        PriorityQueue<Edge> pq = new PriorityQueue<>();
        for (Point p : graph.get(points[0])) {
            pq.add(new Edge(points[0], p));
        }
        while (!pq.isEmpty() && visited.size() < points.length) {
            Edge e = pq.poll();
            Point next = e.end;
            if (!visited.contains(next)) {
                visited.add(next);
                result += e.weight;
                for (Point p : graph.get(next)) {
                    if (!visited.contains(p)) {
                        pq.add(new Edge(next, p));
                    }
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        int[] y = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }
        System.out.println(minimumDistance(x, y));
    }
}
class Edge implements Comparable<Edge> {
    Point start;
    Point end;
    double weight;

    public Edge(Point s, Point e) {
        start = s;
        end = e;
        weight = distance(s, e);
    }

    @Override
    public int compareTo(Edge other) {
        return Double.compare(this.weight, other.weight);
    }

    private double distance(Point a, Point b) {
        return start.distance(end);
    }
}
