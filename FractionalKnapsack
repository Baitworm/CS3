import java.util.*;

public class FractionalKnapsack {
    public static double getOptimalValue(int capacity, int[] values, int[] weights) {
        double totalValue = 0;
        double[] ratio = new double[values.length];
        for (int i = 0; i < values.length; i++) {
            ratio[i] = (double) values[i] / (double)weights[i];
        }
        while (capacity > 0) {
            int highestRatio = findHighestRatio(ratio);
            if (highestRatio == -1) {
                break;
            }
            double fraction = Math.min(1, (double) capacity / (double) weights[highestRatio]);
            totalValue += fraction * values[highestRatio];
            capacity -= fraction * weights[highestRatio];
            ratio[highestRatio] = 0;
        }
        return totalValue;
    }
    
    private static int findHighestRatio(double[] arr) {
        int index = -1;
        double highestValue = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > highestValue) {
                index = i;
                highestValue = arr[i];
            }
        }
        return index;
    }
        

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int capacity = scanner.nextInt();
        int[] values = new int[n];
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
            weights[i] = scanner.nextInt();
        }
        System.out.println(getOptimalValue(capacity, values, weights));
    }
} 
